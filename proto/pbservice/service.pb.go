// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/pbservice/service.proto

package pbservice

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	pbcommon "github.com/hashicorp/consul/proto/pbcommon"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ConnectProxyConfig describes the configuration needed for any proxy managed
// or unmanaged. It describes a single logical service's listener and optionally
// upstreams and sidecar-related config for a single instance. To describe a
// centralized proxy that routed traffic for multiple services, a different one
// of these would be needed for each, sharing the same LogicalProxyID.
//
// mog annotation:
//
// target=github.com/hashicorp/consul/agent/structs.ConnectProxyConfig
// output=service.gen.go
// name=Structs
type ConnectProxyConfig struct {
	// DestinationServiceName is required and is the name of the service to accept
	// traffic for.
	DestinationServiceName string `protobuf:"bytes,1,opt,name=DestinationServiceName,proto3" json:"DestinationServiceName,omitempty"`
	// DestinationServiceID is optional and should only be specified for
	// "side-car" style proxies where the proxy is in front of just a single
	// instance of the service. It should be set to the service ID of the instance
	// being represented which must be registered to the same agent. It's valid to
	// provide a service ID that does not yet exist to avoid timing issues when
	// bootstrapping a service with a proxy.
	DestinationServiceID string `protobuf:"bytes,2,opt,name=DestinationServiceID,proto3" json:"DestinationServiceID,omitempty"`
	// LocalServiceAddress is the address of the local service instance. It is
	// optional and should only be specified for "side-car" style proxies. It will
	// default to 127.0.0.1 if the proxy is a "side-car" (DestinationServiceID is
	// set) but otherwise will be ignored.
	LocalServiceAddress string `protobuf:"bytes,3,opt,name=LocalServiceAddress,proto3" json:"LocalServiceAddress,omitempty"`
	// LocalServicePort is the port of the local service instance. It is optional
	// and should only be specified for "side-car" style proxies. It will default
	// to the registered port for the instance if the proxy is a "side-car"
	// (DestinationServiceID is set) but otherwise will be ignored.
	// mog: func-to=int func-from=int32
	LocalServicePort int32 `protobuf:"varint,4,opt,name=LocalServicePort,proto3" json:"LocalServicePort,omitempty"`
	// Config is the arbitrary configuration data provided with the proxy
	// registration.
	// mog: func-to=ProtobufTypesStructToMapStringInterface func-from=MapStringInterfaceToProtobufTypesStruct
	Config *_struct.Struct `protobuf:"bytes,5,opt,name=Config,proto3" json:"Config,omitempty"`
	// Upstreams describes any upstream dependencies the proxy instance should
	// setup.
	// mog: func-to=UpstreamsToStructs func-from=NewUpstreamsFromStructs
	Upstreams []*Upstream `protobuf:"bytes,6,rep,name=Upstreams,proto3" json:"Upstreams,omitempty"`
	// MeshGateway defines the mesh gateway configuration for upstreams
	MeshGateway *MeshGatewayConfig `protobuf:"bytes,7,opt,name=MeshGateway,proto3" json:"MeshGateway,omitempty"`
	// Expose defines whether checks or paths are exposed through the proxy
	Expose *ExposeConfig `protobuf:"bytes,8,opt,name=Expose,proto3" json:"Expose,omitempty"`
	// Mode represents how the proxy's inbound and upstream listeners are dialed.
	// mog: func-to=structs.ProxyMode func-from=string
	Mode string `protobuf:"bytes,9,opt,name=Mode,proto3" json:"Mode,omitempty"`
	// TransparentProxy defines configuration for when the proxy is in
	// transparent mode.
	TransparentProxy *TransparentProxyConfig `protobuf:"bytes,10,opt,name=TransparentProxy,proto3" json:"TransparentProxy,omitempty"`
	// LocalServiceSocketPath is the path to the unix domain socket for the local service instance
	LocalServiceSocketPath string   `protobuf:"bytes,11,opt,name=LocalServiceSocketPath,proto3" json:"LocalServiceSocketPath,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ConnectProxyConfig) Reset()         { *m = ConnectProxyConfig{} }
func (m *ConnectProxyConfig) String() string { return proto.CompactTextString(m) }
func (*ConnectProxyConfig) ProtoMessage()    {}
func (*ConnectProxyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb99233b75fb80b, []int{0}
}

func (m *ConnectProxyConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectProxyConfig.Unmarshal(m, b)
}
func (m *ConnectProxyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectProxyConfig.Marshal(b, m, deterministic)
}
func (m *ConnectProxyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectProxyConfig.Merge(m, src)
}
func (m *ConnectProxyConfig) XXX_Size() int {
	return xxx_messageInfo_ConnectProxyConfig.Size(m)
}
func (m *ConnectProxyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectProxyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectProxyConfig proto.InternalMessageInfo

func (m *ConnectProxyConfig) GetDestinationServiceName() string {
	if m != nil {
		return m.DestinationServiceName
	}
	return ""
}

func (m *ConnectProxyConfig) GetDestinationServiceID() string {
	if m != nil {
		return m.DestinationServiceID
	}
	return ""
}

func (m *ConnectProxyConfig) GetLocalServiceAddress() string {
	if m != nil {
		return m.LocalServiceAddress
	}
	return ""
}

func (m *ConnectProxyConfig) GetLocalServicePort() int32 {
	if m != nil {
		return m.LocalServicePort
	}
	return 0
}

func (m *ConnectProxyConfig) GetConfig() *_struct.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ConnectProxyConfig) GetUpstreams() []*Upstream {
	if m != nil {
		return m.Upstreams
	}
	return nil
}

func (m *ConnectProxyConfig) GetMeshGateway() *MeshGatewayConfig {
	if m != nil {
		return m.MeshGateway
	}
	return nil
}

func (m *ConnectProxyConfig) GetExpose() *ExposeConfig {
	if m != nil {
		return m.Expose
	}
	return nil
}

func (m *ConnectProxyConfig) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *ConnectProxyConfig) GetTransparentProxy() *TransparentProxyConfig {
	if m != nil {
		return m.TransparentProxy
	}
	return nil
}

func (m *ConnectProxyConfig) GetLocalServiceSocketPath() string {
	if m != nil {
		return m.LocalServiceSocketPath
	}
	return ""
}

// Upstream represents a single upstream dependency for a service or proxy. It
// describes the mechanism used to discover instances to communicate with (the
// Target) as well as any potential client configuration that may be useful such
// as load balancer options, timeouts etc.
//
// mog annotation:
//
// target=github.com/hashicorp/consul/agent/structs.Upstream
// output=service.gen.go
// name=Structs
// ignore-fields=IngressHosts
type Upstream struct {
	// Destination fields are the required ones for determining what this upstream
	// points to. Depending on DestinationType some other fields below might
	// further restrict the set of instances allowable.
	//
	// DestinationType would be better as an int constant but even with custom
	// JSON marshallers it causes havoc with all the mapstructure mangling we do
	// on service definitions in various places.
	DestinationType      string `protobuf:"bytes,1,opt,name=DestinationType,proto3" json:"DestinationType,omitempty"`
	DestinationNamespace string `protobuf:"bytes,2,opt,name=DestinationNamespace,proto3" json:"DestinationNamespace,omitempty"`
	DestinationName      string `protobuf:"bytes,3,opt,name=DestinationName,proto3" json:"DestinationName,omitempty"`
	// Datacenter that the service discovery request should be run against. Note
	// for prepared queries, the actual results might be from a different
	// datacenter.
	Datacenter string `protobuf:"bytes,4,opt,name=Datacenter,proto3" json:"Datacenter,omitempty"`
	// LocalBindAddress is the ip address a side-car proxy should listen on for
	// traffic destined for this upstream service. Default if empty is 127.0.0.1.
	LocalBindAddress string `protobuf:"bytes,5,opt,name=LocalBindAddress,proto3" json:"LocalBindAddress,omitempty"`
	// LocalBindPort is the ip address a side-car proxy should listen on for
	// traffic destined for this upstream service. Required.
	// mog: func-to=int func-from=int32
	LocalBindPort int32 `protobuf:"varint,6,opt,name=LocalBindPort,proto3" json:"LocalBindPort,omitempty"`
	// Config is an opaque config that is specific to the proxy process being run.
	// It can be used to pass arbitrary configuration for this specific upstream
	// to the proxy.
	// mog: func-to=ProtobufTypesStructToMapStringInterface func-from=MapStringInterfaceToProtobufTypesStruct
	Config *_struct.Struct `protobuf:"bytes,7,opt,name=Config,proto3" json:"Config,omitempty"`
	// MeshGateway is the configuration for mesh gateway usage of this upstream
	MeshGateway *MeshGatewayConfig `protobuf:"bytes,8,opt,name=MeshGateway,proto3" json:"MeshGateway,omitempty"`
	// CentrallyConfigured indicates whether the upstream was defined in a proxy
	// instance registration or whether it was generated from a config entry.
	CentrallyConfigured bool `protobuf:"varint,9,opt,name=CentrallyConfigured,proto3" json:"CentrallyConfigured,omitempty"`
	// LocalBindSocketPath is the socket to create to connect to the upstream service
	LocalBindSocketPath  string   `protobuf:"bytes,10,opt,name=LocalBindSocketPath,proto3" json:"LocalBindSocketPath,omitempty"`
	LocalBindSocketMode  string   `protobuf:"bytes,11,opt,name=LocalBindSocketMode,proto3" json:"LocalBindSocketMode,omitempty"`
	DestinationPartition string   `protobuf:"bytes,12,opt,name=DestinationPartition,proto3" json:"DestinationPartition,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Upstream) Reset()         { *m = Upstream{} }
func (m *Upstream) String() string { return proto.CompactTextString(m) }
func (*Upstream) ProtoMessage()    {}
func (*Upstream) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb99233b75fb80b, []int{1}
}

func (m *Upstream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Upstream.Unmarshal(m, b)
}
func (m *Upstream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Upstream.Marshal(b, m, deterministic)
}
func (m *Upstream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Upstream.Merge(m, src)
}
func (m *Upstream) XXX_Size() int {
	return xxx_messageInfo_Upstream.Size(m)
}
func (m *Upstream) XXX_DiscardUnknown() {
	xxx_messageInfo_Upstream.DiscardUnknown(m)
}

var xxx_messageInfo_Upstream proto.InternalMessageInfo

func (m *Upstream) GetDestinationType() string {
	if m != nil {
		return m.DestinationType
	}
	return ""
}

func (m *Upstream) GetDestinationNamespace() string {
	if m != nil {
		return m.DestinationNamespace
	}
	return ""
}

func (m *Upstream) GetDestinationName() string {
	if m != nil {
		return m.DestinationName
	}
	return ""
}

func (m *Upstream) GetDatacenter() string {
	if m != nil {
		return m.Datacenter
	}
	return ""
}

func (m *Upstream) GetLocalBindAddress() string {
	if m != nil {
		return m.LocalBindAddress
	}
	return ""
}

func (m *Upstream) GetLocalBindPort() int32 {
	if m != nil {
		return m.LocalBindPort
	}
	return 0
}

func (m *Upstream) GetConfig() *_struct.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Upstream) GetMeshGateway() *MeshGatewayConfig {
	if m != nil {
		return m.MeshGateway
	}
	return nil
}

func (m *Upstream) GetCentrallyConfigured() bool {
	if m != nil {
		return m.CentrallyConfigured
	}
	return false
}

func (m *Upstream) GetLocalBindSocketPath() string {
	if m != nil {
		return m.LocalBindSocketPath
	}
	return ""
}

func (m *Upstream) GetLocalBindSocketMode() string {
	if m != nil {
		return m.LocalBindSocketMode
	}
	return ""
}

func (m *Upstream) GetDestinationPartition() string {
	if m != nil {
		return m.DestinationPartition
	}
	return ""
}

// ServiceConnect are the shared Connect settings between all service
// definitions from the agent to the state store.
// mog annotation:
//
// target=github.com/hashicorp/consul/agent/structs.ServiceConnect
// output=service.gen.go
// name=Structs
type ServiceConnect struct {
	// Native is true when this service can natively understand Connect.
	Native bool `protobuf:"varint,1,opt,name=Native,proto3" json:"Native,omitempty"`
	// SidecarService is a nested Service Definition to register at the same time.
	// It's purely a convenience mechanism to allow specifying a sidecar service
	// along with the application service definition. It's nested nature allows
	// all of the fields to be defaulted which can reduce the amount of
	// boilerplate needed to register a sidecar service separately, but the end
	// result is identical to just making a second service registration via any
	// other means.
	// mog: func-to=ServiceDefinitionPtrToStructs func-from=NewServiceDefinitionPtrFromStructs
	SidecarService       *ServiceDefinition `protobuf:"bytes,3,opt,name=SidecarService,proto3" json:"SidecarService,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ServiceConnect) Reset()         { *m = ServiceConnect{} }
func (m *ServiceConnect) String() string { return proto.CompactTextString(m) }
func (*ServiceConnect) ProtoMessage()    {}
func (*ServiceConnect) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb99233b75fb80b, []int{2}
}

func (m *ServiceConnect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceConnect.Unmarshal(m, b)
}
func (m *ServiceConnect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceConnect.Marshal(b, m, deterministic)
}
func (m *ServiceConnect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceConnect.Merge(m, src)
}
func (m *ServiceConnect) XXX_Size() int {
	return xxx_messageInfo_ServiceConnect.Size(m)
}
func (m *ServiceConnect) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceConnect.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceConnect proto.InternalMessageInfo

func (m *ServiceConnect) GetNative() bool {
	if m != nil {
		return m.Native
	}
	return false
}

func (m *ServiceConnect) GetSidecarService() *ServiceDefinition {
	if m != nil {
		return m.SidecarService
	}
	return nil
}

// ExposeConfig describes HTTP paths to expose through Envoy outside of Connect.
// Users can expose individual paths and/or all HTTP/GRPC paths for checks.
//
// mog annotation:
//
// target=github.com/hashicorp/consul/agent/structs.ExposeConfig
// output=service.gen.go
// name=Structs
type ExposeConfig struct {
	// Checks defines whether paths associated with Consul checks will be exposed.
	// This flag triggers exposing all HTTP and GRPC check paths registered for the service.
	Checks bool `protobuf:"varint,1,opt,name=Checks,proto3" json:"Checks,omitempty"`
	// Paths is the list of paths exposed through the proxy.
	// mog: func-to=ExposePathSliceToStructs func-from=NewExposePathSliceFromStructs
	Paths                []*ExposePath `protobuf:"bytes,2,rep,name=Paths,proto3" json:"Paths,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ExposeConfig) Reset()         { *m = ExposeConfig{} }
func (m *ExposeConfig) String() string { return proto.CompactTextString(m) }
func (*ExposeConfig) ProtoMessage()    {}
func (*ExposeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb99233b75fb80b, []int{3}
}

func (m *ExposeConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExposeConfig.Unmarshal(m, b)
}
func (m *ExposeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExposeConfig.Marshal(b, m, deterministic)
}
func (m *ExposeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExposeConfig.Merge(m, src)
}
func (m *ExposeConfig) XXX_Size() int {
	return xxx_messageInfo_ExposeConfig.Size(m)
}
func (m *ExposeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ExposeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ExposeConfig proto.InternalMessageInfo

func (m *ExposeConfig) GetChecks() bool {
	if m != nil {
		return m.Checks
	}
	return false
}

func (m *ExposeConfig) GetPaths() []*ExposePath {
	if m != nil {
		return m.Paths
	}
	return nil
}

// mog annotation:
//
// target=github.com/hashicorp/consul/agent/structs.ExposePath
// output=service.gen.go
// name=Structs
type ExposePath struct {
	// ListenerPort defines the port of the proxy's listener for exposed paths.
	// mog: func-to=int func-from=int32
	ListenerPort int32 `protobuf:"varint,1,opt,name=ListenerPort,proto3" json:"ListenerPort,omitempty"`
	// ExposePath is the path to expose through the proxy, ie. "/metrics."
	Path string `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty"`
	// LocalPathPort is the port that the service is listening on for the given path.
	// mog: func-to=int func-from=int32
	LocalPathPort int32 `protobuf:"varint,3,opt,name=LocalPathPort,proto3" json:"LocalPathPort,omitempty"`
	// Protocol describes the upstream's service protocol.
	// Valid values are "http" and "http2", defaults to "http"
	Protocol string `protobuf:"bytes,4,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	// ParsedFromCheck is set if this path was parsed from a registered check
	ParsedFromCheck      bool     `protobuf:"varint,5,opt,name=ParsedFromCheck,proto3" json:"ParsedFromCheck,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExposePath) Reset()         { *m = ExposePath{} }
func (m *ExposePath) String() string { return proto.CompactTextString(m) }
func (*ExposePath) ProtoMessage()    {}
func (*ExposePath) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb99233b75fb80b, []int{4}
}

func (m *ExposePath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExposePath.Unmarshal(m, b)
}
func (m *ExposePath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExposePath.Marshal(b, m, deterministic)
}
func (m *ExposePath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExposePath.Merge(m, src)
}
func (m *ExposePath) XXX_Size() int {
	return xxx_messageInfo_ExposePath.Size(m)
}
func (m *ExposePath) XXX_DiscardUnknown() {
	xxx_messageInfo_ExposePath.DiscardUnknown(m)
}

var xxx_messageInfo_ExposePath proto.InternalMessageInfo

func (m *ExposePath) GetListenerPort() int32 {
	if m != nil {
		return m.ListenerPort
	}
	return 0
}

func (m *ExposePath) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ExposePath) GetLocalPathPort() int32 {
	if m != nil {
		return m.LocalPathPort
	}
	return 0
}

func (m *ExposePath) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *ExposePath) GetParsedFromCheck() bool {
	if m != nil {
		return m.ParsedFromCheck
	}
	return false
}

// mog annotation:
//
// target=github.com/hashicorp/consul/agent/structs.MeshGatewayConfig
// output=service.gen.go
// name=Structs
type MeshGatewayConfig struct {
	// mog: func-to=structs.MeshGatewayMode func-from=string
	Mode                 string   `protobuf:"bytes,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshGatewayConfig) Reset()         { *m = MeshGatewayConfig{} }
func (m *MeshGatewayConfig) String() string { return proto.CompactTextString(m) }
func (*MeshGatewayConfig) ProtoMessage()    {}
func (*MeshGatewayConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb99233b75fb80b, []int{5}
}

func (m *MeshGatewayConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshGatewayConfig.Unmarshal(m, b)
}
func (m *MeshGatewayConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshGatewayConfig.Marshal(b, m, deterministic)
}
func (m *MeshGatewayConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshGatewayConfig.Merge(m, src)
}
func (m *MeshGatewayConfig) XXX_Size() int {
	return xxx_messageInfo_MeshGatewayConfig.Size(m)
}
func (m *MeshGatewayConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshGatewayConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MeshGatewayConfig proto.InternalMessageInfo

func (m *MeshGatewayConfig) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

// mog annotation:
//
// target=github.com/hashicorp/consul/agent/structs.TransparentProxyConfig
// output=service.gen.go
// name=Structs
type TransparentProxyConfig struct {
	// mog: func-to=int func-from=int32
	OutboundListenerPort int32 `protobuf:"varint,1,opt,name=OutboundListenerPort,proto3" json:"OutboundListenerPort,omitempty"`
	// DialedDirectly indicates whether transparent proxies can dial this proxy instance directly.
	// The discovery chain is not considered when dialing a service instance directly.
	// This setting is useful when addressing stateful services, such as a database cluster with a leader node.
	DialedDirectly       bool     `protobuf:"varint,2,opt,name=DialedDirectly,proto3" json:"DialedDirectly,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransparentProxyConfig) Reset()         { *m = TransparentProxyConfig{} }
func (m *TransparentProxyConfig) String() string { return proto.CompactTextString(m) }
func (*TransparentProxyConfig) ProtoMessage()    {}
func (*TransparentProxyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb99233b75fb80b, []int{6}
}

func (m *TransparentProxyConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransparentProxyConfig.Unmarshal(m, b)
}
func (m *TransparentProxyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransparentProxyConfig.Marshal(b, m, deterministic)
}
func (m *TransparentProxyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransparentProxyConfig.Merge(m, src)
}
func (m *TransparentProxyConfig) XXX_Size() int {
	return xxx_messageInfo_TransparentProxyConfig.Size(m)
}
func (m *TransparentProxyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TransparentProxyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TransparentProxyConfig proto.InternalMessageInfo

func (m *TransparentProxyConfig) GetOutboundListenerPort() int32 {
	if m != nil {
		return m.OutboundListenerPort
	}
	return 0
}

func (m *TransparentProxyConfig) GetDialedDirectly() bool {
	if m != nil {
		return m.DialedDirectly
	}
	return false
}

// ServiceDefinition is used to JSON decode the Service definitions. For
// documentation on specific fields see NodeService which is better documented.
//
// mog annotation:
//
// target=github.com/hashicorp/consul/agent/structs.ServiceDefinition
// output=service.gen.go
// name=Structs
type ServiceDefinition struct {
	// mog: func-to=structs.ServiceKind func-from=string
	Kind    string   `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	ID      string   `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Name    string   `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Tags    []string `protobuf:"bytes,4,rep,name=Tags,proto3" json:"Tags,omitempty"`
	Address string   `protobuf:"bytes,5,opt,name=Address,proto3" json:"Address,omitempty"`
	// mog: func-to=MapStringServiceAddressToStructs func-from=NewMapStringServiceAddressFromStructs
	TaggedAddresses map[string]*ServiceAddress `protobuf:"bytes,16,rep,name=TaggedAddresses,proto3" json:"TaggedAddresses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Meta            map[string]string          `protobuf:"bytes,6,rep,name=Meta,proto3" json:"Meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// mog: func-to=int func-from=int32
	Port int32 `protobuf:"varint,7,opt,name=Port,proto3" json:"Port,omitempty"`
	// Path for socket
	SocketPath string     `protobuf:"bytes,18,opt,name=SocketPath,proto3" json:"SocketPath,omitempty"`
	Check      *CheckType `protobuf:"bytes,8,opt,name=Check,proto3" json:"Check,omitempty"`
	// mog: func-to=CheckTypesToStructs func-from=NewCheckTypesFromStructs
	Checks []*CheckType `protobuf:"bytes,9,rep,name=Checks,proto3" json:"Checks,omitempty"`
	// mog: func-to=WeightsPtrToStructs func-from=NewWeightsPtrFromStructs
	Weights           *Weights `protobuf:"bytes,10,opt,name=Weights,proto3" json:"Weights,omitempty"`
	Token             string   `protobuf:"bytes,11,opt,name=Token,proto3" json:"Token,omitempty"`
	EnableTagOverride bool     `protobuf:"varint,12,opt,name=EnableTagOverride,proto3" json:"EnableTagOverride,omitempty"`
	// Proxy is the configuration set for Kind = connect-proxy. It is mandatory in
	// that case and an error to be set for any other kind. This config is part of
	// a proxy service definition and is distinct from but shares some fields with
	// the Connect.Proxy which configures a managed proxy as part of the actual
	// service's definition. This duplication is ugly but seemed better than the
	// alternative which was to re-use the same struct fields for both cases even
	// though the semantics are different and the non-shared fields make no sense
	// in the other case. ProxyConfig may be a more natural name here, but it's
	// confusing for the UX because one of the fields in ConnectProxyConfig is
	// also called just "Config"
	// mog: func-to=ConnectProxyConfigPtrToStructs func-from=NewConnectProxyConfigPtrFromStructs
	Proxy *ConnectProxyConfig `protobuf:"bytes,14,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	// mog: func-to=EnterpriseMetaToStructs func-from=NewEnterpriseMetaFromStructs
	EnterpriseMeta *pbcommon.EnterpriseMeta `protobuf:"bytes,17,opt,name=EnterpriseMeta,proto3" json:"EnterpriseMeta,omitempty"`
	// mog: func-to=ServiceConnectPtrToStructs func-from=NewServiceConnectPtrFromStructs
	Connect              *ServiceConnect `protobuf:"bytes,15,opt,name=Connect,proto3" json:"Connect,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ServiceDefinition) Reset()         { *m = ServiceDefinition{} }
func (m *ServiceDefinition) String() string { return proto.CompactTextString(m) }
func (*ServiceDefinition) ProtoMessage()    {}
func (*ServiceDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb99233b75fb80b, []int{7}
}

func (m *ServiceDefinition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceDefinition.Unmarshal(m, b)
}
func (m *ServiceDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceDefinition.Marshal(b, m, deterministic)
}
func (m *ServiceDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceDefinition.Merge(m, src)
}
func (m *ServiceDefinition) XXX_Size() int {
	return xxx_messageInfo_ServiceDefinition.Size(m)
}
func (m *ServiceDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceDefinition proto.InternalMessageInfo

func (m *ServiceDefinition) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *ServiceDefinition) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ServiceDefinition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceDefinition) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ServiceDefinition) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ServiceDefinition) GetTaggedAddresses() map[string]*ServiceAddress {
	if m != nil {
		return m.TaggedAddresses
	}
	return nil
}

func (m *ServiceDefinition) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ServiceDefinition) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ServiceDefinition) GetSocketPath() string {
	if m != nil {
		return m.SocketPath
	}
	return ""
}

func (m *ServiceDefinition) GetCheck() *CheckType {
	if m != nil {
		return m.Check
	}
	return nil
}

func (m *ServiceDefinition) GetChecks() []*CheckType {
	if m != nil {
		return m.Checks
	}
	return nil
}

func (m *ServiceDefinition) GetWeights() *Weights {
	if m != nil {
		return m.Weights
	}
	return nil
}

func (m *ServiceDefinition) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ServiceDefinition) GetEnableTagOverride() bool {
	if m != nil {
		return m.EnableTagOverride
	}
	return false
}

func (m *ServiceDefinition) GetProxy() *ConnectProxyConfig {
	if m != nil {
		return m.Proxy
	}
	return nil
}

func (m *ServiceDefinition) GetEnterpriseMeta() *pbcommon.EnterpriseMeta {
	if m != nil {
		return m.EnterpriseMeta
	}
	return nil
}

func (m *ServiceDefinition) GetConnect() *ServiceConnect {
	if m != nil {
		return m.Connect
	}
	return nil
}

// Type to hold an address and port of a service
type ServiceAddress struct {
	Address string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	// mog: func-to=int func-from=int32
	Port                 int32    `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceAddress) Reset()         { *m = ServiceAddress{} }
func (m *ServiceAddress) String() string { return proto.CompactTextString(m) }
func (*ServiceAddress) ProtoMessage()    {}
func (*ServiceAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb99233b75fb80b, []int{8}
}

func (m *ServiceAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceAddress.Unmarshal(m, b)
}
func (m *ServiceAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceAddress.Marshal(b, m, deterministic)
}
func (m *ServiceAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAddress.Merge(m, src)
}
func (m *ServiceAddress) XXX_Size() int {
	return xxx_messageInfo_ServiceAddress.Size(m)
}
func (m *ServiceAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAddress.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAddress proto.InternalMessageInfo

func (m *ServiceAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ServiceAddress) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// Weights represent the weight used by DNS for a given status
type Weights struct {
	// mog: func-to=int func-from=int32
	Passing int32 `protobuf:"varint,1,opt,name=Passing,proto3" json:"Passing,omitempty"`
	// mog: func-to=int func-from=int32
	Warning              int32    `protobuf:"varint,2,opt,name=Warning,proto3" json:"Warning,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Weights) Reset()         { *m = Weights{} }
func (m *Weights) String() string { return proto.CompactTextString(m) }
func (*Weights) ProtoMessage()    {}
func (*Weights) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb99233b75fb80b, []int{9}
}

func (m *Weights) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Weights.Unmarshal(m, b)
}
func (m *Weights) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Weights.Marshal(b, m, deterministic)
}
func (m *Weights) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Weights.Merge(m, src)
}
func (m *Weights) XXX_Size() int {
	return xxx_messageInfo_Weights.Size(m)
}
func (m *Weights) XXX_DiscardUnknown() {
	xxx_messageInfo_Weights.DiscardUnknown(m)
}

var xxx_messageInfo_Weights proto.InternalMessageInfo

func (m *Weights) GetPassing() int32 {
	if m != nil {
		return m.Passing
	}
	return 0
}

func (m *Weights) GetWarning() int32 {
	if m != nil {
		return m.Warning
	}
	return 0
}

func init() {
	proto.RegisterType((*ConnectProxyConfig)(nil), "pbservice.ConnectProxyConfig")
	proto.RegisterType((*Upstream)(nil), "pbservice.Upstream")
	proto.RegisterType((*ServiceConnect)(nil), "pbservice.ServiceConnect")
	proto.RegisterType((*ExposeConfig)(nil), "pbservice.ExposeConfig")
	proto.RegisterType((*ExposePath)(nil), "pbservice.ExposePath")
	proto.RegisterType((*MeshGatewayConfig)(nil), "pbservice.MeshGatewayConfig")
	proto.RegisterType((*TransparentProxyConfig)(nil), "pbservice.TransparentProxyConfig")
	proto.RegisterType((*ServiceDefinition)(nil), "pbservice.ServiceDefinition")
	proto.RegisterMapType((map[string]string)(nil), "pbservice.ServiceDefinition.MetaEntry")
	proto.RegisterMapType((map[string]*ServiceAddress)(nil), "pbservice.ServiceDefinition.TaggedAddressesEntry")
	proto.RegisterType((*ServiceAddress)(nil), "pbservice.ServiceAddress")
	proto.RegisterType((*Weights)(nil), "pbservice.Weights")
}

func init() {
	proto.RegisterFile("proto/pbservice/service.proto", fileDescriptor_cbb99233b75fb80b)
}

var fileDescriptor_cbb99233b75fb80b = []byte{
	// 1086 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xef, 0x6e, 0x1b, 0x45,
	0x10, 0x97, 0xff, 0xdb, 0x93, 0xe0, 0x24, 0x9b, 0x10, 0x8e, 0xd0, 0xa2, 0xf4, 0x84, 0x4a, 0xd4,
	0x06, 0xbb, 0x4d, 0x24, 0x40, 0x95, 0x88, 0x44, 0xe3, 0x80, 0x2a, 0x9a, 0xd6, 0xba, 0x18, 0x55,
	0x02, 0xf1, 0x61, 0x7d, 0xb7, 0xb1, 0x4f, 0xb9, 0xec, 0x59, 0xbb, 0xeb, 0x50, 0xbf, 0x15, 0x6f,
	0xc0, 0x1b, 0xf0, 0x89, 0x07, 0x42, 0x3b, 0xbb, 0x77, 0x59, 0xdf, 0x1d, 0x15, 0x7c, 0xf2, 0xee,
	0xfc, 0xe6, 0x37, 0xbb, 0x9e, 0xf9, 0xcd, 0xec, 0xc1, 0xc3, 0x85, 0x48, 0x55, 0x3a, 0x5c, 0x4c,
	0x25, 0x13, 0x77, 0x71, 0xc8, 0x86, 0xf6, 0x77, 0x80, 0x76, 0xd2, 0xcb, 0x81, 0x83, 0x07, 0xb3,
	0x34, 0x9d, 0x25, 0x6c, 0x88, 0xc0, 0x74, 0x79, 0x3d, 0x94, 0x4a, 0x2c, 0x43, 0x65, 0x1c, 0x0f,
	0x3e, 0xcb, 0xe2, 0x84, 0xe9, 0xed, 0x6d, 0xca, 0x87, 0xe6, 0xc7, 0x82, 0x8f, 0x8a, 0x87, 0xcc,
	0x19, 0x4d, 0xd4, 0x3c, 0x9c, 0xb3, 0xf0, 0xc6, 0xb8, 0xf8, 0x7f, 0x35, 0x81, 0x9c, 0xa7, 0x9c,
	0xb3, 0x50, 0x8d, 0x45, 0xfa, 0x7e, 0x75, 0x9e, 0xf2, 0xeb, 0x78, 0x46, 0xbe, 0x86, 0xfd, 0x11,
	0x93, 0x2a, 0xe6, 0x54, 0xc5, 0x29, 0xbf, 0x32, 0xf4, 0x37, 0xf4, 0x96, 0x79, 0xb5, 0xc3, 0xda,
	0x51, 0x2f, 0xf8, 0x17, 0x94, 0x9c, 0xc0, 0x5e, 0x19, 0x79, 0x35, 0xf2, 0xea, 0xc8, 0xaa, 0xc4,
	0xc8, 0x33, 0xd8, 0x7d, 0x9d, 0x86, 0x34, 0xb1, 0x96, 0xef, 0xa3, 0x48, 0x30, 0x29, 0xbd, 0x06,
	0x52, 0xaa, 0x20, 0xf2, 0x04, 0xb6, 0x5d, 0xf3, 0x38, 0x15, 0xca, 0x6b, 0x1e, 0xd6, 0x8e, 0x5a,
	0x41, 0xc9, 0x4e, 0x86, 0xd0, 0x36, 0xff, 0xc9, 0x6b, 0x1d, 0xd6, 0x8e, 0x36, 0x4e, 0x3e, 0x19,
	0x98, 0x7c, 0x0e, 0xb2, 0x7c, 0x0e, 0xae, 0x30, 0x9f, 0x81, 0x75, 0x23, 0xcf, 0xa1, 0xf7, 0xf3,
	0x42, 0x2a, 0xc1, 0xe8, 0xad, 0xf4, 0xda, 0x87, 0x8d, 0xa3, 0x8d, 0x93, 0xdd, 0x41, 0x9e, 0xc2,
	0x41, 0x86, 0x05, 0xf7, 0x5e, 0xe4, 0x0c, 0x36, 0x2e, 0x99, 0x9c, 0xff, 0x48, 0x15, 0xfb, 0x9d,
	0xae, 0xbc, 0x0e, 0x1e, 0xf4, 0xc0, 0x21, 0x39, 0xa8, 0x39, 0x25, 0x70, 0x09, 0xfa, 0x8e, 0x17,
	0xef, 0x17, 0xa9, 0x64, 0x5e, 0xd7, 0xde, 0xf1, 0x9e, 0x6a, 0x00, 0xcb, 0xb2, 0x6e, 0x84, 0x40,
	0xf3, 0x32, 0x8d, 0x98, 0xd7, 0xc3, 0x1c, 0xe1, 0x9a, 0x5c, 0xc2, 0xf6, 0x44, 0x50, 0x2e, 0x17,
	0x54, 0x30, 0x6e, 0x8a, 0xe9, 0x01, 0x86, 0x7b, 0xe4, 0x84, 0x2b, 0xba, 0xd8, 0xc0, 0x25, 0xaa,
	0x56, 0x80, 0x9b, 0xcb, 0xab, 0x34, 0xbc, 0x61, 0x6a, 0x4c, 0xd5, 0xdc, 0xdb, 0x30, 0x0a, 0xa8,
	0x46, 0xfd, 0x3f, 0x9b, 0xd0, 0xcd, 0x32, 0x43, 0x8e, 0x60, 0xcb, 0x29, 0xf9, 0x64, 0xb5, 0xc8,
	0xf4, 0x53, 0x34, 0x17, 0x84, 0xa3, 0xb5, 0x24, 0x17, 0x34, 0x64, 0x15, 0xc2, 0xc9, 0xb1, 0x42,
	0x74, 0x54, 0x67, 0xa3, 0x14, 0x1d, 0x65, 0xf9, 0x39, 0xc0, 0x88, 0x2a, 0x1a, 0x32, 0xae, 0x98,
	0x40, 0xa9, 0xf4, 0x02, 0xc7, 0x92, 0x0b, 0xea, 0x65, 0xcc, 0xa3, 0x4c, 0x7f, 0x2d, 0xf4, 0x2a,
	0xd9, 0xc9, 0x17, 0xf0, 0x51, 0x6e, 0x43, 0xe5, 0xb5, 0x51, 0x79, 0xeb, 0x46, 0x47, 0x76, 0x9d,
	0xff, 0x26, 0xbb, 0x82, 0x86, 0xba, 0xff, 0x57, 0x43, 0xcf, 0x60, 0xf7, 0x9c, 0x71, 0x25, 0x68,
	0x92, 0x58, 0x7c, 0x29, 0x58, 0x84, 0x0a, 0xe9, 0x06, 0x55, 0x50, 0xde, 0x77, 0xfa, 0xce, 0x4e,
	0x79, 0xc1, 0xe9, 0xbb, 0x75, 0xa8, 0x82, 0x81, 0x2a, 0xdc, 0xa8, 0x64, 0xa0, 0x28, 0xd7, 0xcb,
	0x3a, 0xa6, 0x42, 0xc5, 0x7a, 0xe1, 0x6d, 0x96, 0xca, 0x9a, 0x63, 0x3e, 0x87, 0xbe, 0x95, 0x95,
	0x1d, 0x4c, 0x64, 0x1f, 0xda, 0x6f, 0xa8, 0x8a, 0xef, 0x8c, 0x7a, 0xba, 0x81, 0xdd, 0x91, 0x11,
	0xf4, 0xaf, 0xe2, 0x88, 0x85, 0x54, 0x58, 0x02, 0xd6, 0x7f, 0x3d, 0x6d, 0x16, 0x19, 0xb1, 0xeb,
	0x98, 0x63, 0xfc, 0xa0, 0xc0, 0xf1, 0xaf, 0x60, 0xd3, 0x6d, 0x32, 0x7d, 0xda, 0xb9, 0x9e, 0x90,
	0x32, 0x3b, 0xcd, 0xec, 0xc8, 0x53, 0x68, 0xe9, 0x2c, 0x48, 0xaf, 0x8e, 0x43, 0xe1, 0xe3, 0x52,
	0x93, 0x6a, 0x34, 0x30, 0x3e, 0xfe, 0x1f, 0x35, 0x80, 0x7b, 0x2b, 0xf1, 0x61, 0xf3, 0x75, 0x2c,
	0x15, 0xe3, 0x4c, 0xa0, 0x66, 0x6a, 0xa8, 0x99, 0x35, 0x9b, 0x6e, 0x6a, 0x2c, 0x80, 0x91, 0x3c,
	0xae, 0x73, 0xb1, 0xe9, 0x0d, 0x12, 0x1b, 0x8e, 0xd8, 0x32, 0x23, 0x39, 0x80, 0xee, 0x58, 0xcb,
	0x2a, 0x4c, 0x13, 0x2b, 0xee, 0x7c, 0xaf, 0x9b, 0x64, 0x4c, 0x85, 0x64, 0xd1, 0x0f, 0x22, 0xbd,
	0xc5, 0x7f, 0x82, 0xca, 0xee, 0x06, 0x45, 0xb3, 0xff, 0x25, 0xec, 0x94, 0x34, 0x96, 0x4f, 0x9a,
	0xda, 0xfd, 0xa4, 0xf1, 0x15, 0xec, 0x57, 0x8f, 0x11, 0x5d, 0xee, 0xb7, 0x4b, 0x35, 0x4d, 0x97,
	0x3c, 0xaa, 0xf8, 0xbb, 0x95, 0x18, 0x79, 0x0c, 0xfd, 0x51, 0x4c, 0x13, 0x16, 0x8d, 0x62, 0xc1,
	0x42, 0x95, 0xac, 0x30, 0x01, 0xdd, 0xa0, 0x60, 0xf5, 0xff, 0x6e, 0xc3, 0x4e, 0xa9, 0x98, 0xfa,
	0x7e, 0x3f, 0xc5, 0x3c, 0xca, 0xee, 0xa7, 0xd7, 0xa4, 0x0f, 0xf5, 0xfc, 0xc9, 0xa9, 0xbf, 0x1a,
	0x69, 0x1f, 0x67, 0x38, 0xe0, 0x5a, 0xdb, 0x26, 0x74, 0x26, 0xbd, 0xe6, 0x61, 0x43, 0xdb, 0xf4,
	0x9a, 0x78, 0xd0, 0x59, 0x6f, 0xfe, 0x6c, 0x4b, 0x7e, 0x85, 0xad, 0x09, 0x9d, 0xcd, 0x58, 0x36,
	0x04, 0x98, 0xf4, 0xb6, 0x51, 0x04, 0xcf, 0x3f, 0xa4, 0xb4, 0x41, 0x81, 0x73, 0xc1, 0x95, 0x58,
	0x05, 0xc5, 0x48, 0xe4, 0x05, 0x34, 0x2f, 0x99, 0xa2, 0xf6, 0xad, 0x79, 0xfc, 0xc1, 0x88, 0xda,
	0xd1, 0x84, 0x41, 0x0e, 0x6a, 0x46, 0x27, 0xb8, 0x83, 0x09, 0xc6, 0xb5, 0x1e, 0x76, 0x4e, 0x3b,
	0x13, 0x33, 0xec, 0x9c, 0x2e, 0x7e, 0x02, 0x2d, 0xa3, 0x03, 0x33, 0x63, 0xf6, 0x9c, 0x03, 0xd1,
	0xae, 0xe7, 0x71, 0x60, 0x5c, 0xc8, 0x71, 0xde, 0x0b, 0x3d, 0xbc, 0x5d, 0xb5, 0x73, 0xd6, 0x21,
	0xc7, 0xd0, 0x79, 0xc7, 0xe2, 0xd9, 0x5c, 0x49, 0xfb, 0xf2, 0x10, 0xc7, 0xdd, 0x22, 0x41, 0xe6,
	0x42, 0xf6, 0xa0, 0x35, 0x49, 0x6f, 0x18, 0xb7, 0xf3, 0xc3, 0x6c, 0xc8, 0x31, 0xec, 0x5c, 0x70,
	0x3a, 0x4d, 0xd8, 0x84, 0xce, 0xde, 0xde, 0x31, 0x21, 0xe2, 0x88, 0xe1, 0xb8, 0xe8, 0x06, 0x65,
	0x80, 0x9c, 0x42, 0xcb, 0xbc, 0x74, 0x7d, 0x3c, 0xef, 0xa1, 0x7b, 0xbd, 0xd2, 0x57, 0x4d, 0x60,
	0x7c, 0xc9, 0x19, 0xf4, 0x2f, 0xf4, 0xd8, 0x5f, 0x88, 0x58, 0x32, 0x4c, 0xfd, 0x0e, 0xb2, 0xf7,
	0x07, 0xf6, 0xeb, 0x69, 0x1d, 0x0d, 0x0a, 0xde, 0xe4, 0x14, 0x3a, 0x36, 0xb8, 0xb7, 0x85, 0xc4,
	0x4f, 0xcb, 0x35, 0xb3, 0x0e, 0x41, 0xe6, 0x79, 0xf0, 0x1b, 0xec, 0x55, 0xc9, 0x81, 0x6c, 0x43,
	0xe3, 0x86, 0xad, 0xac, 0x7e, 0xf5, 0x92, 0x0c, 0xa1, 0x75, 0x47, 0x93, 0xa5, 0x79, 0xfb, 0x2a,
	0x83, 0xdb, 0x10, 0x81, 0xf1, 0x7b, 0x51, 0xff, 0xb6, 0x76, 0xf0, 0x0d, 0xf4, 0x72, 0x6d, 0x54,
	0xc4, 0xdc, 0x73, 0x63, 0xf6, 0x1c, 0xa2, 0x7f, 0x96, 0x4f, 0xdb, 0x4c, 0xec, 0x4e, 0x1b, 0xd4,
	0xd6, 0xdb, 0x20, 0x53, 0x5b, 0xfd, 0x5e, 0x6d, 0xfe, 0x77, 0x79, 0xcd, 0x35, 0x71, 0x4c, 0xa5,
	0x8c, 0xf9, 0xcc, 0x36, 0x7c, 0xb6, 0xd5, 0xc8, 0x3b, 0x2a, 0xb8, 0x46, 0x0c, 0x37, 0xdb, 0xbe,
	0xfc, 0xea, 0x97, 0xa7, 0xb3, 0x58, 0xcd, 0x97, 0x53, 0x9d, 0xfb, 0xe1, 0x9c, 0xca, 0x79, 0x1c,
	0xa6, 0x62, 0x31, 0x0c, 0x53, 0x2e, 0x97, 0xc9, 0xb0, 0xf0, 0x01, 0x3b, 0x6d, 0xa3, 0xe1, 0xf4,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xba, 0x23, 0xd7, 0x20, 0x3f, 0x0b, 0x00, 0x00,
}
